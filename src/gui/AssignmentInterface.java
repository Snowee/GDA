package gui;

import gda.Answer;
import gda.Assignment;

import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.CountDownLatch;

import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;


public class AssignmentInterface {

   /**
	 * autogenerated serialversion
	 */
	private static final long serialVersionUID = 6218855935713333505L;

	private JButton button;
   
	private ButtonGroup group = new ButtonGroup();
   
	private JFrame frame ;
	
	private JPanel panel ;
   
	private CountDownLatch doneSignal;
   
	private Answer answer ;
	
	private boolean answered ;
   
	//Bag constrains for question text (standard with picture)
   private static GridBagConstraints ASSQUESTION = new GridBagConstraints() ;
   static{
	   /*
	    *  10 pixels from frame borders
	    *  in center of top row and third column
	    *  one row big filling the remaining columns
	    *  internal padding 50, 50
	    */
	   ASSQUESTION.insets	  = new Insets(10,10,10,10);
	   ASSQUESTION.fill  	  = GridBagConstraints.BOTH ;
	   ASSQUESTION.anchor	  = GridBagConstraints.CENTER ;
	   ASSQUESTION.gridx 	  = 3 ;
	   ASSQUESTION.gridy 	  = 0 ;
	   ASSQUESTION.gridheight = 1 ;
	   ASSQUESTION.gridwidth  = GridBagConstraints.REMAINDER ;
	   ASSQUESTION.weightx    = 0.8;
	   ASSQUESTION.weighty    = 0.8;
	   ASSQUESTION.ipadx      = 50 ;
	   ASSQUESTION.ipady	  = 50 ;
   }
   //Bag constrains for question text without picture
   private static GridBagConstraints ASSQUESTIONNOPIC = (GridBagConstraints) ASSQUESTION.clone();
   static {
	   ASSQUESTIONNOPIC.gridx 	  = 0 ;
   }
   //Bag constraints for picture
   private static GridBagConstraints ASSPICTURE = new GridBagConstraints() ; 
   static{
	   ASSPICTURE.insets	  = new Insets(10,10,10,10);
	   ASSPICTURE.gridy 	  = 0 ;
	   ASSPICTURE.gridheight = 1 ;
	   ASSPICTURE.gridwidth  = GridBagConstraints.REMAINDER ;
	   ASSPICTURE.weighty    = 0.8;
	   ASSPICTURE.fill  	  = GridBagConstraints.NONE ;
	   ASSPICTURE.anchor	  = GridBagConstraints.PAGE_START ;
	   ASSPICTURE.ipadx       = 0 ;
	   ASSPICTURE.ipady	      = 0 ;
	   ASSPICTURE.weightx     = 0.01;
	   ASSPICTURE.gridx       = 0 ;
	   ASSPICTURE.gridwidth   = 2;
   }
   //Bag constraints for multiple choice answers ( i for answer number  0 <= i < 4 )
   private static GridBagConstraints ASSCHOICE(int i){
	  GridBagConstraints c = new GridBagConstraints();
      c.fill  	   = GridBagConstraints.BOTH ;
      c.anchor	   = GridBagConstraints.LINE_START ;
	  c.ipadx      = 0 ;
      c.ipady	   = 0 ;
      c.weightx    = 0;
      c.weighty    = 0.2/3;
      c.gridwidth  = 1 ;
      c.gridheight = 1 ;
      c.gridy = 1 + i% 2;
  	  if( i > 1)
  		c.gridx = 1;
  	  else
  		c.gridx = 0;
	  return c ;
   }
   //Bag constraints for hand in button
   private static GridBagConstraints ASSBUTTON = new GridBagConstraints() ;
   static {
	   GridBagConstraints c = ASSBUTTON ;
	   c.ipadx      = 0 ;
	   c.ipady	   = 0 ;
	   c.weightx    = 0;
	   c.weighty    = 0.2/3;
	   c.gridwidth  = 1 ;
	   c.gridheight = 1 ;
	      
	   c.fill		 = GridBagConstraints.BOTH;
       c.anchor  	 = GridBagConstraints.CENTER ;
       c.gridx 	 = 0 ;
       c.gridy 	 = 3 ;
       c.gridwidth = 5 ;
   }
    
   public AssignmentInterface(JFrame frame) {
        this.frame = frame ;
   }
   public Answer ask(Assignment assignment){
    	//signal that makes the assignment wait for the user to hand-in
    	doneSignal = new CountDownLatch(1) ;
    	
    	//model for input given by user
    	answer = new Answer(assignment);
        
    	// hand-in button
        button = new JButton("Inleveren");
        button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	if( answered )
            		return ;
            	answered = true ;
				ButtonModel model = group.getSelection();
                if( model != null){
					answer.setFirstChoice(new Integer(model.getActionCommand()));
					doneSignal.countDown();
                }
            }
        });
        
        panel = new JPanel(new GridBagLayout());
        
        // Construct question space.
        JTextArea text = new JTextArea(assignment.question());
        text.setEditable(false);
        text.setOpaque(false);
        text.setFont(new Font(Font.DIALOG, Font.BOLD, 19));
        
        //sets text and picture depending on whether picture is given
        if( assignment.hasPicture()){
        	panel.add(assignment.getPicture(), ASSPICTURE);
        	panel.add(text, ASSQUESTION);
        } else
        	panel.add(text, ASSQUESTIONNOPIC);
        
        // Construct checkboxes.
        JRadioButton[] answerButtons = new JRadioButton[assignment.options().length];
        for (int i = 0; i < answerButtons.length; i++) {
        	answerButtons[i] = new JRadioButton(assignment.options()[i].option());
        	answerButtons[i].setFont(new Font(Font.DIALOG, Font.BOLD, 15));
        	answerButtons[i].setActionCommand(new Integer(i).toString());
        	group.add(answerButtons[i]);
        	panel.add(answerButtons[i], ASSCHOICE(i));
        }
        
        panel.add(button,ASSBUTTON);

        frame.getContentPane().add(panel);
        frame.setVisible(true);
        
        // question is presented we now wait for user to hand-in
        try {
			doneSignal.await();
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
        
        //display his answer in red or green to show if answer was correct
        if(answer.correct()){
			answerButtons[answer.getFirstChoice()].setBackground(Color.green);
		} else {
			answerButtons[answer.getFirstChoice()].setBackground(Color.red);
		}
        try {
			Thread.sleep(1000);
		} catch (InterruptedException e1) {	}
        
        frame.removeAll();
        
        return answer;
    }


}